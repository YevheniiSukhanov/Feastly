// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Нова модель Ingredient
model Ingredient {
  id                   String               @id @default(uuid()) @db.VarChar(255)
  name                 String               @unique @db.VarChar(255) // Назва обов'язкова та унікальна
  description          String?              @db.Text // Опис
  unit                 String               @db.VarChar(50) // Одиниця вимірювання (шт., г., мл.) - обов'язкове поле
  imageUrl             String?              @map("image_url") @db.VarChar(255) // Посилання на зображення
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")

  // Зв'язок до проміжної таблиці IngredientOnRecipe - БЕЗ @map ТУТ
  recipesOnIngredients IngredientOnRecipe[]
}

// Нова проміжна таблиця для зв'язку "Багато до багатьох" між Recipe та Ingredient
model IngredientOnRecipe {
  ingredientId String @map("ingredient_id") @db.VarChar(255)
  recipeId     String @map("recipe_id") @db.VarChar(255)
  quantity     Float  @db.Float // Кількість інгредієнту (вага, об'єм або кількість)
  assignedAt   DateTime @default(now()) @map("assigned_at")

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@id([ingredientId, recipeId]) // Композитний первинний ключ
  @@map("ingredients_on_recipes") // Назва таблиці в БД
}


// Оновлена Модель Recipe
model Recipe {
  id                   String             @id @default(uuid()) @db.VarChar(255)
  name                 String             @db.VarChar(255) // Змінено з 'title' на 'name', як у вас було
  // ingredients String @db.Text -- ЦЕ ПОЛЕ ВИДАЛЯЄТЬСЯ І ЗАМІНЮЄТЬСЯ НИЖЧЕ
  instructions         String             @db.Text // Залишаємо як було, бо у вас вже String @db.Text
  prepTimeMinutes      Int?
  cookTimeMinutes      Int?
  servings             Int?
  imageUrl             String?            @map("image_url") @db.VarChar(255)
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Новий зв'язок: Recipe може мати багато IngredientOnRecipe - БЕЗ @map ТУТ
  ingredientsOnRecipes IngredientOnRecipe[]
  MealPlanEntry        MealPlanEntry[] // Зв'язок з MealPlanEntry (вже був у вас)
}

// Модель MealPlan (без змін)
model MealPlan {
  id              String          @id @default(uuid()) @db.VarChar(255)
  userId          String?         @map("user_id") @db.VarChar(255)
  planName        String          @map("plan_name") @db.VarChar(255)
  weekStartDate   DateTime        @map("week_start_date") @db.Date // DATE type in MySQL
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  MealPlanEntry   MealPlanEntry[]
}

// Модель MealPlanEntry (без змін)
model MealPlanEntry {
  id           String    @id @default(uuid()) @db.VarChar(255)
  mealPlanId   String    @map("meal_plan_id") @db.VarChar(255)
  recipeId     String?   @map("recipe_id") @db.VarChar(255)

  mealDate     DateTime  @map("meal_date") @db.Date // DATE type in MySQL
  mealType     MealType  @map("meal_type") // ENUM type

  mealPlan     MealPlan  @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe       Recipe?   @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@unique([mealPlanId, mealDate, mealType]) // Унікальність: один тип прийому їжі на дату в плані
  @@map("meal_plan_entries") // Назва таблиці в БД
}

// Enum MealType (без змін)
enum MealType {
  breakfast
  lunch
  dinner
  snack
}